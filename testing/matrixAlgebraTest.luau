local Tools = require("src.Tools")
local Scalars = require("src.Scalars")
local MatrixAlgebra = require("src.MatrixAlgebra")

print("Testing MatrixAlgebra")
print()

local ones = MatrixAlgebra.liSparseMatrix.new({{1, 1}, {1, 1}})
print(tostring(ones))
print(tostring(MatrixAlgebra.liSparseMatrix.scale(ones, 3)))
local twos = ones * ones
print(tostring(twos))
local rand = MatrixAlgebra.liSparseMatrix.random(2, 2, -1, 1, 0)
print(tostring(rand))
local rinv = MatrixAlgebra.liSparseMatrix.inverse(rand)
print(tostring(rinv))
print()
local oneC = MatrixAlgebra.liSparseMatrix.new({{1}, {1}})
print(tostring(rinv * rand))
print(tostring(rinv * oneC))
print()
local lurd = MatrixAlgebra.liSparseMatrix.lu(rand)
local l, u = lurd[1], lurd[2]
print(tostring(u))
local solv = MatrixAlgebra.liSparseMatrix.solve(rand, {1, 1})
print(tostring(solv))
print(tostring(rand * solv))
print()
local iden = MatrixAlgebra.liSparseMatrix.new({{1, 0}, {0, 1}})
print(iden)
print(iden + iden)
print(MatrixAlgebra.liSparseMatrix.scale(iden, {3, 2}))
print()

print("Testing sparseMatrix")
print()

ones = MatrixAlgebra.sparseMatrix.new({{1, 1}, {1, 1}})
twos = ones * ones
rand = MatrixAlgebra.sparseMatrix.random(2, 2, -1, 1, 0)
rinv = MatrixAlgebra.sparseMatrix.inverse(rand)
oneC = MatrixAlgebra.sparseMatrix.new({{1}, {1}})
solv = MatrixAlgebra.sparseMatrix.solve(rand, {1, 1})
lurd = MatrixAlgebra.sparseMatrix.lu(rand)
l, u = lurd[1], lurd[2]
iden = MatrixAlgebra.sparseMatrix.new({{1, 0}, {0, 1}})
print(tostring(ones))
print(tostring(twos))
print(tostring(rand))
print(tostring(rinv))
print()
print(tostring(rinv * rand))
print(tostring(rinv * oneC))
print()
print(tostring(u))
print(tostring(solv))
print(tostring(rand * solv))
print()
print(iden)
print(iden + iden)
print()

print("Testing matrix")
print()

ones = MatrixAlgebra.matrix.new({{1, 1}, {1, 1}})
twos = ones * ones
rand = MatrixAlgebra.matrix.random(2, 2, -1, 1, 0)
rinv = MatrixAlgebra.matrix.inverse(rand)
oneC = MatrixAlgebra.matrix.new({{1}, {1}})
solv = MatrixAlgebra.matrix.solve(rand, {1, 1})
lurd = MatrixAlgebra.matrix.lu(rand)
l, u = lurd[1], lurd[2]
iden = MatrixAlgebra.matrix.new({{1, 0}, {0, 1}})
print(tostring(ones))
print(tostring(twos))
print(tostring(rand))
print(tostring(rinv))
print()
print(tostring(rinv * rand))
print(tostring(rinv * oneC))
print()
print(tostring(u))
print(tostring(Tools.list.tostring(solv)))
print(tostring(Tools.list.tostring(MatrixAlgebra.matrix.apply(rand, solv))))
print()
print(iden)
print(iden + iden)
print()